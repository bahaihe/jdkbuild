diff -r cf85f331361b agent/src/os/linux/libproc_impl.c
--- a/hostspot/agent/src/os/linux/libproc_impl.c	Tue Apr 18 15:44:32 2017 -0700
+++ b/hotspot/agent/src/os/linux/libproc_impl.c	Fri Apr 28 00:19:31 2017 -0700
@@ -45,7 +45,7 @@
    }
 }
 
-int pathmap_open(const char* name) {
+int pathmap_open(const char* name, pid_t pid) {
    int fd;
    char alt_path[PATH_MAX + 1];
 
@@ -69,7 +69,15 @@
             return fd;
          }
       }
+   } else if (pid > -1) {
+      snprintf(alt_path, sizeof(alt_path), "/proc/%d/root", pid);
+      strcat(alt_path, name);
+      fd = open(alt_path, O_RDONLY);
+      if (fd >= 0) {
+         return fd;
+      }
    } else {
+      print_debug("unable to open path %s relative to process", name);
       fd = open(name, O_RDONLY);
       if (fd >= 0) {
          return fd;
@@ -166,7 +174,7 @@
    newlib->base = base;
 
    if (fd == -1) {
-      if ( (newlib->fd = pathmap_open(newlib->name)) < 0) {
+      if ( (newlib->fd = pathmap_open(newlib->name, ph->pid)) < 0) {
          print_debug("can't open shared object %s\n", newlib->name);
          free(newlib);
          return NULL;
@@ -183,7 +191,7 @@
       return NULL;
    }
 
-   newlib->symtab = build_symtab(newlib->fd, libname);
+   newlib->symtab = build_symtab(newlib->fd, libname, ph->pid);
    if (newlib->symtab == NULL) {
       print_debug("symbol table build failed for %s\n", newlib->name);
    }
diff -r cf85f331361b agent/src/os/linux/libproc_impl.h
--- a/hotspot/agent/src/os/linux/libproc_impl.h	Tue Apr 18 15:44:32 2017 -0700
+++ b/hotspot/agent/src/os/linux/libproc_impl.h	Fri Apr 28 00:19:31 2017 -0700
@@ -102,7 +102,7 @@
    struct core_data*  core;      // data only used for core dumps, NULL for process
 };
 
-int pathmap_open(const char* name);
+int pathmap_open(const char* name, pid_t pid);
 
 void print_debug(const char* format,...);
 void print_error(const char* format,...);
diff -r cf85f331361b agent/src/os/linux/ps_core.c
--- a/hotspot/agent/src/os/linux/ps_core.c	Tue Apr 18 15:44:32 2017 -0700
+++ b/hotspot/agent/src/os/linux/ps_core.c	Fri Apr 28 00:19:31 2017 -0700
@@ -343,7 +343,7 @@
 
       print_debug("looking for %s\n", classes_jsa);
       // open the class sharing archive file
-      fd = pathmap_open(classes_jsa);
+      fd = pathmap_open(classes_jsa, ph->pid);
       if (fd < 0) {
         print_debug("can't open %s!\n", classes_jsa);
         ph->core->classes_jsa_fd = -1;
@@ -829,7 +829,7 @@
             pread(ph->core->exec_fd, interp_name, MIN(exec_php->p_filesz, BUF_SIZE), exec_php->p_offset);
             print_debug("ELF interpreter %s\n", interp_name);
             // read interpreter segments as well
-            if ((ph->core->interp_fd = pathmap_open(interp_name)) < 0) {
+            if ((ph->core->interp_fd = pathmap_open(interp_name, ph->pid)) < 0) {
                print_debug("can't open runtime loader\n");
                goto err;
             }
@@ -961,7 +961,7 @@
 
       if (lib_name[0] != '\0') {
          // ignore empty lib names
-         lib_fd = pathmap_open(lib_name);
+         lib_fd = pathmap_open(lib_name, ph->pid);
 
          if (lib_fd < 0) {
             print_debug("can't open shared object %s\n", lib_name);
diff -r cf85f331361b agent/src/os/linux/symtab.c
--- a/hotspot/agent/src/os/linux/symtab.c	Tue Apr 18 15:44:32 2017 -0700
+++ b/hotspot/agent/src/os/linux/symtab.c	Fri Apr 28 00:19:31 2017 -0700
@@ -131,12 +131,12 @@
 /* Open a debuginfo file and check its CRC.  If it exists and the CRC
    matches return its fd.  */
 static int
-open_debug_file (const char *pathname, unsigned int crc)
+open_debug_file (const char *pathname, unsigned int crc, pid_t pid)
 {
   unsigned int file_crc = 0;
   unsigned char buffer[8 * 1024];
 
-  int fd = pathmap_open(pathname);
+  int fd = pathmap_open(pathname, pid);
 
   if (fd < 0)
     return -1;
@@ -196,7 +196,8 @@
                                      int fd,
                                      ELF_EHDR *ehdr,
                                      ELF_SHDR *shbuf,
-                                     struct elf_section *scn_cache)
+                                     struct elf_section *scn_cache,
+                                     pid_t pid)
 {
   int debug_fd;
   struct elf_section *debug_link = find_section_by_name(".gnu_debuglink", fd, ehdr,
@@ -220,7 +221,7 @@
   /* Look in the same directory as the object.  */
   strcpy(last_slash+1, debug_filename);
 
-  debug_fd = open_debug_file(debug_pathname, crc);
+  debug_fd = open_debug_file(debug_pathname, crc, pid);
   if (debug_fd >= 0) {
     free(debug_pathname);
     return debug_fd;
@@ -230,7 +231,7 @@
   strcpy(last_slash+1, ".debug/");
   strcat(last_slash, debug_filename);
 
-  debug_fd = open_debug_file(debug_pathname, crc);
+  debug_fd = open_debug_file(debug_pathname, crc, pid);
   if (debug_fd >= 0) {
     free(debug_pathname);
     return debug_fd;
@@ -242,7 +243,7 @@
   last_slash = strrchr(debug_pathname, '/');
   strcpy(last_slash+1, debug_filename);
 
-  debug_fd = open_debug_file(debug_pathname, crc);
+  debug_fd = open_debug_file(debug_pathname, crc, pid);
   if (debug_fd >= 0) {
     free(debug_pathname);
     return debug_fd;
@@ -252,7 +253,7 @@
   return -1;
 }
 
-static struct symtab* build_symtab_internal(int fd, const char *filename, bool try_debuginfo);
+static struct symtab* build_symtab_internal(int fd, const char *filename, bool try_debuginfo, pid_t pid);
 
 /* Look for a ".gnu_debuglink" section.  If one exists, try to open a
    suitable debuginfo file and read a symbol table from it.  */
@@ -260,12 +261,13 @@
                                      int fd,
                                      ELF_EHDR *ehdr,
                                      ELF_SHDR *shbuf,
-                                     struct elf_section *scn_cache)
+                                     struct elf_section *scn_cache,
+                                     pid_t pid)
 {
-  fd = open_file_from_debug_link(name, fd, ehdr, shbuf, scn_cache);
+  fd = open_file_from_debug_link(name, fd, ehdr, shbuf, scn_cache, pid);
 
   if (fd >= 0) {
-    struct symtab *symtab = build_symtab_internal(fd, NULL, /* try_debuginfo */ false);
+    struct symtab *symtab = build_symtab_internal(fd, NULL, /* try_debuginfo */ false, pid);
     close(fd);
     return symtab;
   }
@@ -298,7 +300,7 @@
 
 // Read a build ID note.  Try to open any associated debuginfo file
 // and return its symtab
-static struct symtab* build_symtab_from_build_id(Elf64_Nhdr *note)
+static struct symtab* build_symtab_from_build_id(Elf64_Nhdr *note, pid_t pid)
 {
   int fd;
   struct symtab *symtab = NULL;
@@ -308,9 +310,9 @@
   char *filename
     = (build_id_to_debug_filename (note->n_descsz, bytes));
 
-  fd = pathmap_open(filename);
+  fd = pathmap_open(filename, pid);
   if (fd >= 0) {
-    symtab = build_symtab_internal(fd, NULL, /* try_debuginfo */ false);
+    symtab = build_symtab_internal(fd, NULL, /* try_debuginfo */ false, pid);
     close(fd);
   }
   free(filename);
@@ -320,7 +322,7 @@
 
 // read symbol table from given fd.  If try_debuginfo) is true, also
 // try to open an associated debuginfo file
-static struct symtab* build_symtab_internal(int fd, const char *filename, bool try_debuginfo) {
+static struct symtab* build_symtab_internal(int fd, const char *filename, bool try_debuginfo, pid_t pid) {
   ELF_EHDR ehdr;
   char *names = NULL;
   struct symtab* symtab = NULL;
@@ -452,7 +454,7 @@
       if (cursct->sh_type == SHT_NOTE) {
         Elf64_Nhdr *note = (Elf64_Nhdr *)scn_cache[cnt].c_data;
         if (note->n_type == NT_GNU_BUILD_ID) {
-          symtab = build_symtab_from_build_id(note);
+          symtab = build_symtab_from_build_id(note, pid);
         }
       }
       cursct++;
@@ -462,7 +464,7 @@
     // Then, if that doesn't work, the debug link
     if (symtab == NULL) {
       symtab = build_symtab_from_debug_link(filename, fd, &ehdr, shbuf,
-                                            scn_cache);
+                                            scn_cache, pid);
     }
 
     // If we still haven't found a symtab, use the object's own symtab.
@@ -488,8 +490,8 @@
   return symtab;
 }
 
-struct symtab* build_symtab(int fd, const char *filename) {
-  return build_symtab_internal(fd, filename, /* try_debuginfo */ true);
+struct symtab* build_symtab(int fd, const char *filename, pid_t pid) {
+  return build_symtab_internal(fd, filename, /* try_debuginfo */ true, pid);
 }
 
 
diff -r cf85f331361b agent/src/os/linux/symtab.h
--- a/hotspot/agent/src/os/linux/symtab.h	Tue Apr 18 15:44:32 2017 -0700
+++ b/hotspot/agent/src/os/linux/symtab.h	Fri Apr 28 00:19:31 2017 -0700
@@ -32,7 +32,7 @@
 struct symtab;
 
 // build symbol table for a given ELF file descriptor
-struct symtab* build_symtab(int fd, const char *filename);
+struct symtab* build_symtab(int fd, const char *filename, pid_t pid);
 
 // destroy the symbol table
 void destroy_symtab(struct symtab* symtab);

