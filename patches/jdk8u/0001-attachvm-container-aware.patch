diff --git a/jdk/src/solaris/classes/sun/tools/attach/LinuxVirtualMachine.java b/jdk/src/solaris/classes/sun/tools/attach/LinuxVirtualMachine.java
index 9dec425..c0e61f3 100644
--- a/jdk/src/solaris/classes/sun/tools/attach/LinuxVirtualMachine.java
+++ b/jdk/src/solaris/classes/sun/tools/attach/LinuxVirtualMachine.java
@@ -32,6 +32,10 @@ import com.sun.tools.attach.spi.AttachProvider;
 import java.io.InputStream;
 import java.io.IOException;
 import java.io.File;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.nio.file.Files;
 
 /*
  * Linux implementation of HotSpotVirtualMachine
@@ -66,12 +69,20 @@ public class LinuxVirtualMachine extends HotSpotVirtualMachine {
             throw new AttachNotSupportedException("Invalid process identifier");
         }
 
+        // Try and resolve to the "inner most" pid namespace
+        int ns_pid;
+        try {
+            ns_pid = getNamespacePid(pid);
+        } catch (NumberFormatException x) {
+            throw new AttachNotSupportedException("Unable to parse namespace");
+        }
+
         // Find the socket file. If not found then we attempt to start the
         // attach mechanism in the target VM by sending it a QUIT signal.
         // Then we attempt to find the socket file again.
-        path = findSocketFile(pid);
+        path = findSocketFile(pid, ns_pid);
         if (path == null) {
-            File f = createAttachFile(pid);
+            File f = createAttachFile(pid, ns_pid);
             try {
                 // On LinuxThreads each thread is a process and we don't have the
                 // pid of the VMThread which has SIGQUIT unblocked. To workaround
@@ -99,7 +110,7 @@ public class LinuxVirtualMachine extends HotSpotVirtualMachine {
                     try {
                         Thread.sleep(delay);
                     } catch (InterruptedException x) { }
-                    path = findSocketFile(pid);
+                    path = findSocketFile(pid, ns_pid);
                     i++;
                 } while (i <= retries && path == null);
                 if (path == null) {
@@ -271,8 +282,12 @@ public class LinuxVirtualMachine extends HotSpotVirtualMachine {
     }
 
     // Return the socket file for the given process.
-    private String findSocketFile(int pid) {
-        File f = new File(tmpdir, ".java_pid" + pid);
+    private String findSocketFile(int pid, int ns_pid) {
+        // A process may not exist in the same mount namespace as the caller.
+        // Instead, attach relative to the target root filesystem as exposed by
+        // procfs regardless of namespaces.
+        String root = "/proc/" + pid + "/root/" + tmpdir;
+        File f = new File(root, ".java_pid" + ns_pid);
         if (!f.exists()) {
             return null;
         }
@@ -283,8 +298,8 @@ public class LinuxVirtualMachine extends HotSpotVirtualMachine {
     // if not already started. The client creates a .attach_pid<pid> file in the
     // target VM's working directory (or temp directory), and the SIGQUIT handler
     // checks for the file.
-    private File createAttachFile(int pid) throws IOException {
-        String fn = ".attach_pid" + pid;
+    private File createAttachFile(int pid, int ns_pid) throws IOException {
+        String fn = ".attach_pid" + ns_pid;
         String path = "/proc/" + pid + "/cwd/" + fn;
         File f = new File(path);
         try {
@@ -316,6 +331,32 @@ public class LinuxVirtualMachine extends HotSpotVirtualMachine {
     }
 
 
+    // Return the inner most namespaced PID if there is one,
+    // otherwise return the original PID
+    private int getNamespacePid(int pid) throws IOException, NumberFormatException {
+        // Assuming a real procfs sits beneath, reading this doesn't block
+        // nor will it consume a lot of memory
+        String statusFile = "/proc/" + pid + "/status";
+        Path statusPath = Paths.get(statusFile);
+
+        for (String line : Files.readAllLines(statusPath, StandardCharsets.UTF_8)) {
+            String[] parts = line.split(":");
+            if (parts.length == 2 && parts[0].trim().equals("NSpid")) {
+                parts = parts[1].trim().split("\\s+");
+                // The last entry represents the PID the JVM "thinks" it is.
+                // Even in non-namespaced pids these entries should be
+                // valid. You could refer to it as the inner most pid.
+                int ns_pid = Integer.parseInt(parts[parts.length - 1]);
+                return ns_pid;
+            }
+        }
+
+        // TODO XXX friggin old kernels may not have NSpid field (i.e. 3.10)
+        // fallback to original pid in the event we cannot deduce
+        return pid;
+    }
+
+
     //-- native methods
 
     static native boolean isLinuxThreads();
